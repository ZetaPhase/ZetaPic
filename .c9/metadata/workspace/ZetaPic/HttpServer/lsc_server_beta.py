{"changed":true,"filter":false,"title":"lsc_server_beta.py","tooltip":"/ZetaPic/HttpServer/lsc_server_beta.py","value":"\"\"\"\nLSC Server Beta\n\nMain Server Logic\n\nBase Version 2.4\n\"\"\"\n#2013\n\nPRODUCT_ID = 'ExaPhaser LSC Server v0.3.1' \n\nfrom http.server import HTTPServer, SimpleHTTPRequestHandler\nimport socket\nimport webbrowser\n\nsiteURL = ''\nfrom os import curdir, sep\nimport os\n\nfrom http.server import BaseHTTPRequestHandler\nfrom socketserver import ThreadingMixIn\nimport LSCParser\nimport ConfigParser\n\nclass LSC:\n    def parseToHTML(self, lsc,args):\n        html = LSCParser.LanguageService(lsc,args)\n        return html\n\nclass Config:\n    def get404Page():\n        _404pg = ConfigParser.getProperty('err404')[0]\n        return _404pg\n\nclass OmniBeanHandler(BaseHTTPRequestHandler):\n    #GET Handler\n    def do_GET(self):\n        requestUrl = self.path\n        args = self.path.split('?')\n        self.path = args[0]\n        params = ''\n        if (len(args) == 2):\n            params = args[1]\n        indexpage = 'index.html'\n        fileExtensions = ['.pw','.omnibean','.web','.thunderstorm','.px','.htm','.lentil','.igec','.obx']\n        reqURL = self.path[1:]\n        err_404page=Config.get404Page()\n        print('REQUESTED ['+reqURL+']')\n        if self.path.endswith(\"/\"):\n            self.path+=indexpage\n            print('ADDED /'+indexpage)\n        if (not os.path.exists(reqURL)):\n            print ('ERR 404 ['+reqURL+']')\n            #if (not os.path.exists('/index.html')):\n            #    self.path = \"/index.htm\"\n        try:\n            #Check the file extension required and set the right mime\n            #type\n            sendReply = False\n            semdError = False\n            errorCode = -1\n            lsc = False\n            mimetype='text/plain'\n            if self.path.endswith(\".html\"):\n                mimetype='text/html'\n                sendReply = True\n            #\"\"\"\n            for ftypes in fileExtensions:\n                if self.path.endswith(ftypes):\n                    mimetype='text/html'\n                    sendReply = True\n            #\"\"\"                  \n    \n            if self.path.endswith(\".lsc\"):\n                mimetype='text/html'\n                sendReply = True\n                lsc = True\n            if self.path.endswith(\".jpg\"):\n                mimetype='image/jpg'\n                sendReply = True\n            if self.path.endswith(\".gif\"):\n                mimetype='image/gif'\n                sendReply = True\n            if self.path.endswith(\".js\"):\n                mimetype='application/javascript'\n                sendReply = True\n            if self.path.endswith(\".xap\"):\n                mimetype='application/x-silverlight-app'\n                sendReply = True\n            if self.path.endswith(\".xbap\"):\n                mimetype='application/x-ms-xbap'\n                sendReply = True\n            if self.path.endswith(\".xaml\"):\n                mimetype='application/xaml+xml'\n                sendReply = True\n            if self.path.endswith(\".css\"):\n                mimetype='text/css'\n                sendReply = True\n            else:\n                sendError = True\n                errorCode='1104 Not Found'\n            if sendReply == True:\n\t\t#Open the static file requested and send it\n                f = open(curdir + sep + self.path, 'rb')\n                self.send_response(200)\n                self.send_header('Content-type',mimetype)\n                self.end_headers()\n                content = f.read()\n                if (lsc):\n                    content = str.encode(LSC.parseToHTML(bytes.decode(content),params))\n                self.wfile.write(content)\n                f.close()\n            else:\n                if sendError:\n                    self.path=err_404page\n                    parseLSC=self.path.endswith('.lsc')\n                    if (parseLSC):\n                        mimetype='text/html'\n                    for ftypes in fileExtensions:\n                        if self.path.endswith(ftypes):\n                            mimetype='text/html'\n                    #Open the static file requested and send it\n                    f = open(curdir + sep + self.path, 'rb')\n                    self.send_response(200)\n                    self.send_header('Content-type',mimetype)\n                    self.end_headers()\n                    content = f.read()\n                    if (parseLSC):\n                        content = str.encode(LSC.parseToHTML(bytes.decode(content),params))\n                    self.wfile.write(content)\n                    f.close()\n            return\n        except IOError:\n            self.send_error(404,'File Not Found: %s' % self.path)\n\n        \n\nclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n  \"\"\"Handle requests in a separate thread.\"\"\"\n\ndef gethost():\n    return socket.getfqdn()\n\ndef start_server(HOST,PORT):\n    global siteURL\n    #HOST = '127.0.0.1'\n    httpd = HTTPServer((HOST, PORT), SimpleHTTPRequestHandler)    \n    print('Starting',PRODUCT_ID)\n    url = 'http:/'+HOST+':'+str(PORT)\n    print('Server running on:',url)\n    siteURL = url\n    print('Close the python window to stop server.')\n    httpd.serve_forever()\n\ndef open_server(HOST,PORT):\n    global siteURL\n    #HOST = '127.0.0.1'\n    httpd = HTTPServer((HOST, PORT), SimpleHTTPRequestHandler)    \n    print('Starting',PRODUCT_ID)\n    url = 'http:/'+HOST+':'+str(PORT)\n    print('Server running on:',url)\n    siteURL = url\n    print('Close the python window to stop server.')\n    webbrowser.open_new(siteURL)\n    httpd.serve_forever()\n    \ndef open_lsc_server(HOST,PORT):\n    global siteURL\n    #HOST = '127.0.0.1'\n    httpd = HTTPServer((HOST, PORT), OmniBeanHandler)    \n    print('Starting',PRODUCT_ID)\n    url = 'http:/'+HOST+':'+str(PORT)\n    print('Server running on:',url)\n    siteURL = url\n    print('Close the python window to stop server.')\n    webbrowser.open_new(siteURL)\n    httpd.serve_forever()  \n\ndef start_lsc_server(HOST,PORT):\n    global siteURL\n    #HOST = '127.0.0.1'\n    httpd = HTTPServer((HOST, PORT), OmniBeanHandler)    \n    print('Starting',PRODUCT_ID)\n    url = 'http:/'+HOST+':'+str(PORT)\n    print('Server running on:',url)\n    siteURL = url\n    print('Close the python window to stop server.')\n    #webbrowser.open_new(siteURL)\n    httpd.serve_forever()  \n\ndef daemon_server(HOST,PORT):\n    server = ThreadedHTTPServer((HOST,PORT), SimpleHTTPRequestHandler)\n    server.serve_forever()   \n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":1373,"scrollleft":1,"selection":{"start":{"row":104,"column":39},"end":{"row":104,"column":39},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":90,"state":"start","mode":"ace/mode/python"}},"timestamp":1462128813000}